name: 🚀 Optimized CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

concurrency:
  group: ci-optimized-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'
  COVERAGE_THRESHOLD: 80

jobs:
  # Quick validation jobs that run in parallel
  validate:
    name: 🔍 Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      
      - name: 🔍 Type check
        run: bun run typecheck
      
      - name: 🧹 Lint check
        run: bun run lint
      
      - name: 🎨 Format check
        run: bun run format:check

  # Security and quality checks
  security:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      
      - name: 🔍 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: .semgrep.yml
          generateSarif: true
          sarifFile: semgrep.sarif
        continue-on-error: true
      
      - name: 🔍 Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
      
      - name: 🔒 Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📊 Dependency Audit
        run: bun audit --audit-level=high
        continue-on-error: true

  # Unit tests with coverage
  unit-tests:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      
      - name: 🧪 Run tests with coverage
        run: bun run test:ci
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false
      
      - name: 📊 Check coverage thresholds
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
            echo "Coverage: ${COVERAGE}%"
            if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
              echo "❌ Coverage below threshold: ${COVERAGE}% < ${COVERAGE_THRESHOLD}%"
              exit 1
            else
              echo "✅ Coverage threshold met: ${COVERAGE}%"
            fi
          fi

  # E2E tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: 🎭 Run E2E tests
        run: npm run e2e:ci
      
      - name: 🎭 Run Accessibility tests
        run: npm run a11y
        continue-on-error: true
      
      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Build and performance tests
  build-performance:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate, security, unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      
      - name: 🏗️ Build web app
        run: bun run web:build
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/
          retention-days: 7
      
      - name: 🚀 Lighthouse Performance
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI completed with warnings"
        continue-on-error: true
      
      - name: 📊 Performance Budget Check
        run: |
          if [ -f "lighthouse-results.json" ]; then
            node <<'EOF'
const fs = require('fs');
try {
  const data = JSON.parse(fs.readFileSync('lighthouse-results.json', 'utf8'));
  const lhr = data.lhr;
  if (
    !lhr ||
    !lhr.audits ||
    !lhr.audits['largest-contentful-paint'] ||
    !lhr.audits['cumulative-layout-shift'] ||
    typeof lhr.audits['largest-contentful-paint'].numericValue !== 'number' ||
    typeof lhr.audits['cumulative-layout-shift'].numericValue !== 'number'
  ) {
    console.error('❌ lighthouse-results.json does not have the expected structure.');
    process.exit(1);
  }
  const LCP = lhr.audits['largest-contentful-paint'].numericValue;
  const CLS = lhr.audits['cumulative-layout-shift'].numericValue;
  console.log(`LCP: ${LCP}ms (target: <2500ms)`);
  console.log(`CLS: ${CLS} (target: <0.1)`);
  let failed = false;
  if (LCP > 2500) {
    console.error(`❌ LCP exceeds budget: ${LCP}ms > 2500ms`);
    failed = true;
  }
  if (CLS > 0.1) {
    console.error(`❌ CLS exceeds budget: ${CLS} > 0.1`);
    failed = true;
  }
  if (!failed) {
    console.log('✅ Performance budget met');
  } else {
    process.exit(1);
  }
} catch (e) {
  console.error('❌ Failed to read or parse lighthouse-results.json:', e.message);
  process.exit(1);
}
EOF
          fi
        continue-on-error: true

  # Release notes (optional)
  release-notes:
    name: 📝 Release Notes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: 📝 Update Release Notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Final status check
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [validate, security, unit-tests, e2e-tests, build-performance]
    if: always()
    steps:
      - name: 📊 CI Status Summary
        run: |
          echo "## CI Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Performance | ${{ needs.build-performance.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate.result }}" != "success" || "${{ needs.security.result }}" != "success" || "${{ needs.unit-tests.result }}" != "success" || "${{ needs.e2e-tests.result }}" != "success" || "${{ needs.build-performance.result }}" != "success" ]]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ All CI checks passed"
          fi