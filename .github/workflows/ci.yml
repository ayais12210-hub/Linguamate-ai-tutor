name: 🚀 CI Pipeline (Legacy)

on:
  pull_request:
  push:
    branches: [main, develop]

concurrency:
  group: ci-legacy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  typecheck:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🔍 Type check
        run: bun run typecheck

  lint:
    name: 🧹 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🧹 Run ESLint
        run: bun run lint
      - name: 🎨 Check formatting
        run: bun run format:check
      - name: 🔄 Check for circular dependencies
        run: |
          npx madge --circular app components modules || (echo "Circular dependencies found" && exit 1)

  unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🧪 Run tests with coverage
        run: bun run test:ci
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: 📥 Install dependencies
        run: npm ci
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
      - name: 🎭 Run E2E tests
        run: npm run e2e:ci
      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  semgrep:
    name: 🔒 Security Scan (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: 🔍 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: .semgrep.yml
          generateSarif: "1"
          sarifFile: semgrep.sarif
        continue-on-error: true
      - name: 🔍 Verify SARIF file exists
        run: |
          if [ -f "semgrep.sarif" ]; then
            echo "✅ SARIF file found: semgrep.sarif"
            ls -la semgrep.sarif
          else
            echo "⚠️  SARIF file not found, creating empty one"
            cat > semgrep.sarif <<'EOF'
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "semgrep",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
      - name: 📤 Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  build-web:
    name: 🏗️ Build Web
    needs: [typecheck, lint, unit, e2e, semgrep]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🏗️ Build web app
        run: bun run web:build
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/
          retention-days: 7

  lighthouse:
    name: 🚀 Lighthouse Performance
    needs: build-web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: dist/
      - name: 🚀 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI completed with warnings"
        continue-on-error: true
