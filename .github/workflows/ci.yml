name: CI

on:
  pull_request:
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Type check
        run: bun run typecheck

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run ESLint
        run: bun run lint
      - name: Check formatting
        run: bun run format:check
      - name: Check for circular dependencies
        run: |
          npx madge --circular app components modules || (echo "Circular dependencies found" && exit 1)
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            .eslintcache
            eslint-report.json
          retention-days: 7

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run tests with coverage
        run: bun run test:ci
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
            junit.xml
          retention-days: 7
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npm run e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  semgrep:
    name: Security Scan (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/security-audit
            p/secrets
          generateSarif: "1"
          sarifFile: semgrep.sarif
      - name: Verify SARIF file exists
        run: |
          if [ -f "semgrep.sarif" ]; then
            echo "✅ SARIF file found: semgrep.sarif"
            ls -la semgrep.sarif
          else
            echo "⚠️  SARIF file not found, creating empty one"
            cat > semgrep.sarif <<'EOF'
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "semgrep",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  build-web:
    name: Build Web
    needs: [typecheck, lint, unit, e2e, semgrep]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Build web app
        run: bun run web:build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/
          retention-days: 7

  lighthouse:
    name: Lighthouse Performance
    needs: build-web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: dist/
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI completed with warnings"

  ai-review:
    name: AI Code Review
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    needs: [typecheck, lint, unit, e2e, semgrep]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Debug Environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Git version: $(git --version)"
          echo "GitHub event: ${{ github.event_name }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "Is draft: ${{ github.event.pull_request.draft }}"
          api_keys_configured=0

      - name: Run AI Review
        id: ai_review
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AI_MODEL: "gpt-4o-mini"
          MAX_TOKENS: "8000"
          DIFF_LIMIT_KB: "900"
          REVIEW_TONE: "precise, implementation-first, UK English"
          PROJECT_CONTEXT_PATHS: |
            package.json
            tsconfig.json
            app/
            components/
            modules/
            tests/
            .github/
        run: |
          echo "Starting AI review process..."
          node .github/ai-reviewer/review.mjs
          echo "AI review completed with exit code: $?"

      - name: Surface AI review result
        if: always()
        run: |
          echo "AI review step outcome: ${{ steps.ai_review.outcome }}"
          echo "AI review step conclusion: ${{ steps.ai_review.conclusion }}"
          if [ "${{ steps.ai_review.outcome }}" != "success" ]; then
            echo "⚠️ AI review failed, but continuing pipeline..."
            echo "Check the logs above for detailed error information"
          else
            echo "✅ AI review completed successfully"
          fi
