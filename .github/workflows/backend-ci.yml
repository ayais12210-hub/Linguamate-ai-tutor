name: 🔧 Backend CI

on:
  pull_request:
    paths:
      - 'backend/**'
      - 'schemas/**'
      - 'lib/security/**'
      - 'package.json'
      - 'tsconfig.backend.json'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'schemas/**'
      - 'lib/security/**'
      - 'package.json'
      - 'tsconfig.backend.json'

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  backend-checks:
    name: 🔍 Backend Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
            
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🔍 Backend TypeCheck
        run: bun run backend:typecheck
        
      - name: 🧹 Backend Lint
        run: bun run backend:lint
        
      - name: 🧪 Backend Tests
        run: bun run backend:test
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci-testing-only-32chars
          
      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: coverage/
          retention-days: 7
          
      - name: 💬 Comment Coverage
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            let coverageText = '## 📊 Backend Coverage Report\n\n';
            
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              
              coverageText += '| Metric | Coverage | Details |\n';
              coverageText += '|--------|----------|----------|\n';
              coverageText += `| Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
              coverageText += `| Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n`;
              coverageText += `| Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
              coverageText += `| Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n`;
              
              // Check thresholds
              const failed = [];
              if (total.lines.pct < 80) failed.push('lines');
              if (total.statements.pct < 80) failed.push('statements');
              if (total.functions.pct < 80) failed.push('functions');
              if (total.branches.pct < 75) failed.push('branches');
              
              if (failed.length > 0) {
                coverageText += `\n⚠️ **Coverage thresholds not met for: ${failed.join(', ')}**`;
              } else {
                coverageText += '\n✅ **All coverage thresholds met!**';
              }
            } catch (e) {
              coverageText += '❌ Failed to parse coverage report\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageText
            });

  backend-security:
    name: 🔒 Backend Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/jwt
            p/owasp-top-ten
          generateSarif: true
          
      - name: 📤 Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.semgrep.outputs.sarif }}
          
      - name: 🔍 Check for hardcoded secrets
        run: |
          # Simple check for common patterns
          if grep -r "JWT_SECRET.*=.*['\"].*['\"]" backend/ --include="*.ts" --include="*.js"; then
            echo "❌ Found hardcoded secrets!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  backend-build:
    name: 🏗️ Backend Build Test
    runs-on: ubuntu-latest
    needs: [backend-checks]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🏗️ Test Backend Build
        run: |
          # Create a test build script
          cat > test-build.js << 'EOF'
          import app from './backend/hono.ts';
          
          // Test that the app can be imported and started
          const server = Bun.serve({
            port: 3001,
            fetch: app.fetch,
          });
          
          console.log('✅ Backend build successful');
          console.log(`Server would run on http://localhost:${server.port}`);
          
          // Clean shutdown
          server.stop();
          process.exit(0);
          EOF
          
          # Run the test
          timeout 5s bun run test-build.js || exit_code=$?
          
          if [ "${exit_code:-0}" -eq 124 ]; then
            echo "✅ Backend starts successfully (timeout expected)"
            exit 0
          elif [ "${exit_code:-0}" -eq 0 ]; then
            echo "✅ Backend build test passed"
            exit 0
          else
            echo "❌ Backend build test failed"
            exit 1
          fi
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci-testing-only-32chars

  backend-integration:
    name: 🔗 Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-checks]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🧪 Run Integration Tests
        run: |
          # Create integration test script
          cat > backend-integration-test.js << 'EOF'
          import app from './backend/hono.ts';
          
          const server = Bun.serve({
            port: 3002,
            fetch: app.fetch,
          });
          
          // Test health endpoint
          const healthRes = await fetch(`http://localhost:${server.port}/api/health`);
          const health = await healthRes.json();
          
          if (health.status !== 'ok') {
            throw new Error('Health check failed');
          }
          
          console.log('✅ Health endpoint working');
          
          // Test info endpoint
          const infoRes = await fetch(`http://localhost:${server.port}/api/info`);
          const info = await infoRes.json();
          
          if (!info.name || !info.version) {
            throw new Error('Info endpoint incomplete');
          }
          
          console.log('✅ Info endpoint working');
          
          // Test CORS headers
          const corsRes = await fetch(`http://localhost:${server.port}/api/health`, {
            headers: { 'Origin': 'http://localhost:3000' }
          });
          
          if (!corsRes.headers.get('access-control-allow-origin')) {
            throw new Error('CORS headers missing');
          }
          
          console.log('✅ CORS configured');
          
          // Clean shutdown
          server.stop();
          console.log('✅ All integration tests passed');
          EOF
          
          bun run backend-integration-test.js
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci-testing-only-32chars
          CORS_ALLOWED_ORIGINS: http://localhost:3000