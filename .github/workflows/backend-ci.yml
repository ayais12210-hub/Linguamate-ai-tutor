name: 🔧 Backend CI Pipeline

on:
  pull_request:
    paths:
      - 'backend/**'
      - 'schemas/**'
      - 'lib/trpc*'
      - 'lib/api*'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'schemas/**'
      - 'lib/trpc*'
      - 'lib/api*'
      - '.github/workflows/backend-ci.yml'

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  backend-typecheck:
    name: 🔍 Backend Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🔍 Backend type check
        run: bun run backend:typecheck

  backend-lint:
    name: 🧹 Backend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🧹 Backend lint
        run: bun run backend:lint

  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🧪 Run backend tests
        run: bun run backend:test
      - name: 📊 Upload backend coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: backend
          fail_ci_if_error: false

  backend-security:
    name: 🔒 Backend Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: 🔍 Run Semgrep on backend
        uses: returntocorp/semgrep-action@v1
        with:
          config: .semgrep.yml
          generateSarif: "1"
          sarifFile: backend-semgrep.sarif
          paths: backend/
        continue-on-error: true
      - name: 🔍 Verify SARIF file exists
        run: |
          if [ -f "backend-semgrep.sarif" ]; then
            echo "✅ Backend SARIF file found: backend-semgrep.sarif"
            ls -la backend-semgrep.sarif
          else
            echo "⚠️  Backend SARIF file not found, creating empty one"
            cat > backend-semgrep.sarif <<'EOF'
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "semgrep",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
      - name: 📤 Upload Backend SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: backend-semgrep.sarif

  backend-build:
    name: 🏗️ Backend Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🏗️ Test backend build
        run: bun run backend:build
      - name: 🧪 Test backend startup (dry run)
        run: |
          # Test that the backend can be imported without errors
          node -e "
            try {
              require('./backend/hono.ts');
              console.log('✅ Backend imports successfully');
            } catch (error) {
              console.error('❌ Backend import failed:', error.message);
              process.exit(1);
            }
          "

  backend-health-check:
    name: 🏥 Backend Health Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🏥 Start backend server
        run: |
          # Set required environment variables
          export JWT_SECRET="test-secret-key-that-is-long-enough-for-security-requirements"
          export NODE_ENV="test"
          export CORS_ORIGIN="https://test.com"
          
          # Start server in background
          bun run backend:dev &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:8080/api/ || exit 1
          curl -f http://localhost:8080/api/info || exit 1
          
          # Test CORS headers
          curl -H "Origin: https://test.com" -I http://localhost:8080/api/ | grep -i "access-control-allow-origin" || exit 1
          
          # Test rate limiting (should work)
          curl -f http://localhost:8080/api/trpc/auth/login || true
          
          # Clean up
          kill $SERVER_PID
        timeout-minutes: 2

  backend-integration:
    name: 🔗 Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-typecheck, backend-lint, backend-test]
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile
      - name: 🔗 Run integration tests
        run: |
          # Set test environment
          export JWT_SECRET="test-secret-key-that-is-long-enough-for-security-requirements"
          export NODE_ENV="test"
          export CORS_ORIGIN="https://test.com"
          
          # Run all tests including integration
          bun run test --testPathPatterns="backend.*integration|backend.*security"
        timeout-minutes: 10

  backend-deployment-check:
    name: 🚀 Backend Deployment Check
    runs-on: ubuntu-latest
    needs: [backend-typecheck, backend-lint, backend-test, backend-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: 🚀 Backend deployment readiness
        run: |
          echo "✅ Backend is ready for deployment"
          echo "📊 All backend checks passed:"
          echo "  - Type checking ✅"
          echo "  - Linting ✅"
          echo "  - Testing ✅"
          echo "  - Build verification ✅"
          echo "  - Security scanning ✅"