# 🔒 Security Notes — Android (Linguamate AI)

This document defines the **security posture** of the Linguamate AI Android app.  
It addresses client-side protections, backend hardening, secrets management, compliance with Google Play policies, and planned enhancements.  
All practices align with OWASP MASVS, Google Play requirements, and modern Android security guidance.  

---

## 🌐 Transport Security (Network Layer)
- ✅ All traffic is transmitted exclusively over **HTTPS/TLS 1.2+**.  
- ✅ Cleartext HTTP blocked in `AndroidManifest.xml` via `android:usesCleartextTraffic="false"`.  
- ✅ Backend (Hono) enforces strong cipher suites (TLS 1.2/1.3 only).  
- ✅ Certificate pinning **planned** for high-sensitivity endpoints (e.g., authentication).  
- ✅ HSTS enabled at server layer: `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`.  
- ✅ No mixed content allowed (all assets served via HTTPS).  

---

## 🔑 Secrets Management
- ❌ No hardcoded API keys, secrets, or credentials in the client.  
- ✅ Only **public, non-sensitive configs** exposed via `EXPO_PUBLIC_*` environment variables.  
- ✅ Sensitive values (API keys, signing tokens) remain **server-side only** or inside CI/CD secret managers.  
- ✅ Server responds with temporary tokens scoped to least privilege.  
- ✅ GitHub repo monitored with **Gitleaks** and **secret scanning** to prevent accidental key commits.  

---

## 🛡 Backend Hardening (tRPC + Hono)
- ✅ Rate limiting, abuse detection, and throttling enforced at API gateway.  
- ✅ Structured error messages — no raw stack traces exposed.  
- ✅ CORS policy:
  - **Development:** open for localhost + staging.  
  - **Production:** locked to `linguamate.ai` and `app.linguamate.ai`.  
- ✅ Security headers:
  - `Content-Security-Policy` (restrict script/img origins).  
  - `X-Frame-Options: DENY`.  
  - `X-Content-Type-Options: nosniff`.  
  - `Referrer-Policy: strict-origin-when-cross-origin`.  
  - `Permissions-Policy: microphone=(), camera=(), geolocation=()`.  
- ✅ Backend health checks on `/api/health` exclude sensitive details.  

---

## 🤖 Content Moderation (AI Safety)
- ✅ AI prompt/response moderation handled **server-side** (before reaching clients).  
- ✅ Filters applied for:
  - Profanity, hate speech, harassment.  
  - Illegal or harmful content.  
  - Sensitive personally identifiable information.  
- ✅ Moderation events logged as metadata only (no raw prompts stored).  
- ✅ User-facing AI always returns **safe fallback messages** if filtered.  

---

## 🎤 Permissions Model (Least Privilege)
- ✅ **Microphone**: requested *only* when user taps “record” for speech-to-text.  
- ❌ No background or persistent microphone recording.  
- ✅ No access requested for:
  - Location.  
  - Contacts.  
  - SMS.  
  - External storage (beyond app sandbox).  
- ✅ Clear rationale provided before runtime permission request:
  > “Linguamate uses your microphone only while you’re speaking to practise pronunciation. Audio is never stored without your consent.”  

---

## 📊 Logging & Observability
- ✅ Logs exclude PII, authentication tokens, or sensitive user content.  
- ✅ All API logs use **correlation IDs** to trace flows across client/server.  
- ✅ Sensitive values (JWTs, API keys) **redacted** before logging.  
- ✅ Client logs disabled in production builds (only structured errors reported).  
- ✅ Crash/analytics logs opt-in with **user controls** in Settings → Privacy.  

---

## 🔐 Secure Storage
- ✅ **On native builds**: tokens stored in `expo-secure-store` (encrypted at rest).  
- ✅ **On web fallback**: HttpOnly cookies preferred; localStorage only with CSRF/XSS protections.  
- ✅ Refresh tokens:
  - Short-lived.  
  - Revocable server-side.  
  - Rotated on use (to prevent replay).  
- ✅ Session expiry enforced after inactivity.  

---

## 📦 Dependency & SDK Hygiene
- ✅ Regular updates of **Expo SDK**, **React Native**, and third-party libraries.  
- ✅ Automated monitoring:  
  - **Dependabot** for npm package updates.  
  - **npm audit** run in CI pipeline.  
  - **Semgrep** for static security scans.  
  - **Gitleaks** for secret detection.  
- ✅ Unused/abandoned packages actively removed to reduce attack surface.  
- ✅ All transitive dependencies reviewed at each major release.  

---

## 📱 Play Store & Device Compliance
- ✅ Complies with **Google Play Data Safety**:  
  - Microphone optional, user-triggered.  
  - Storage scoped to app sandbox only.  
- ✅ Runtime permission rationale shown before microphone request.  
- ✅ Android App Integrity enabled via Play App Signing.  
- ✅ App tested against Google Play **Pre-Launch Reports** (stability, accessibility, security).  
- ✅ No use of restricted APIs (SMS, Call Logs, etc.).  

---

## 🧭 Future Enhancements (Planned)
- 🔜 **Play Integrity API**: device attestation to detect tampered/rooted devices.  
- 🔜 **Server-side anomaly detection** for unusual API usage (e.g., token reuse, high-volume abuse).  
- 🔜 **Penetration testing** reports stored under `docs/security/pentest/` before each major release.  
- 🔜 **Continuous fuzz testing** of backend endpoints (tRPC router).  
- 🔜 Expand CI/CD pipeline with **dynamic app security testing (DAST)**.  

---

✅ With these measures, Linguamate AI maintains a **least-privilege, defense-in-depth** approach across Android and backend infrastructure.
